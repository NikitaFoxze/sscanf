name: Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
      - "*/*"
      - "**"
    tags: ['v*']
  pull_request:
    branches:
      - "*"
      - "*/*"
      - "**"

jobs:
  build-windows-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          clean: true
          submodules: recursive
          fetch-depth: 0

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $version = "${{ github.ref_name }}".Substring(1)
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "VERSION_SHORT=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ARTIFACT_NAME=sscanf-$version-win32" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set default version (for non-tag builds)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION=2.15.1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "VERSION_SHORT=2.15.1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ARTIFACT_NAME=sscanf-2.15.1-win32" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Check CMake version
        run: cmake --version

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install latest conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          
      - name: Generate build files
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release .. -G "Visual Studio 17 2022" -A Win32
          cmake --build . --config Release

      - name: Create Windows package structure
        run: |
          mkdir sscanf-$env:VERSION_SHORT-win32
          mkdir sscanf-$env:VERSION_SHORT-win32/plugins
          mkdir sscanf-$env:VERSION_SHORT-win32/components
          mkdir sscanf-$env:VERSION_SHORT-win32/pawno
          mkdir sscanf-$env:VERSION_SHORT-win32/pawno/include
          mkdir sscanf-$env:VERSION_SHORT-win32/qawno
          mkdir sscanf-$env:VERSION_SHORT-win32/qawno/include
          
          copy build/Release/sscanf.dll sscanf-$env:VERSION_SHORT-win32/amxsscanf.dll
          copy build/Release/sscanf.dll sscanf-$env:VERSION_SHORT-win32/plugins/sscanf.dll
          copy build/Release/sscanf.dll sscanf-$env:VERSION_SHORT-win32/components/sscanf.dll
          copy sscanf2.inc sscanf-$env:VERSION_SHORT-win32/
          copy sscanf2.inc sscanf-$env:VERSION_SHORT-win32/pawno/include/
          copy sscanf2.inc sscanf-$env:VERSION_SHORT-win32/qawno/include/
          copy LICENSE sscanf-$env:VERSION_SHORT-win32/
          copy pawn.json sscanf-$env:VERSION_SHORT-win32/
          copy README.md sscanf-$env:VERSION_SHORT-win32/

      - name: Check created directory structure
        run: |
          echo "Directory structure:"
          Get-ChildItem -Recurse sscanf-$env:VERSION_SHORT-win32

      - name: Create Windows zip archive
        run: |
          7z a -tzip sscanf-$env:VERSION_SHORT-win32.zip .\sscanf-$env:VERSION_SHORT-win32\*
          
      - name: Check created archive
        run: |
          echo "Created files:"
          Get-ChildItem *.zip
          
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: $env:ARTIFACT_NAME
          path: sscanf-$env:VERSION_SHORT-win32.zip

  build-linux-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          clean: true
          submodules: recursive
          fetch-depth: 0

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          version="${GITHUB_REF#refs/tags/}"
          version="${version#v}"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "VERSION_SHORT=$version" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=sscanf-$version-linux" >> $GITHUB_ENV

      - name: Set default version (for non-tag builds)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION=2.15.1" >> $GITHUB_ENV
          echo "VERSION_SHORT=2.15.1" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=sscanf-2.15.1-linux" >> $GITHUB_ENV

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install g++-multilib cmake

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install latest conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Generate build files
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Create Linux package structure
        run: |
          # Переименовываем библиотеку
          cd build
          mv ./libsscanf.so ./sscanf.so
          cd ..
          
          mkdir -p sscanf-$VERSION_SHORT-linux/plugins
          mkdir -p sscanf-$VERSION_SHORT-linux/components
          mkdir -p sscanf-$VERSION_SHORT-linux/pawno/include
          mkdir -p sscanf-$VERSION_SHORT-linux/qawno/include
          
          cp build/sscanf.so sscanf-$VERSION_SHORT-linux/amxsscanf.so
          cp build/sscanf.so sscanf-$VERSION_SHORT-linux/plugins/sscanf.so
          cp build/sscanf.so sscanf-$VERSION_SHORT-linux/components/sscanf.so
          cp sscanf2.inc sscanf-$VERSION_SHORT-linux/
          cp sscanf2.inc sscanf-$VERSION_SHORT-linux/pawno/include/
          cp sscanf2.inc sscanf-$VERSION_SHORT-linux/qawno/include/
          cp LICENSE sscanf-$VERSION_SHORT-linux/
          cp pawn.json sscanf-$VERSION_SHORT-linux/
          cp README.md sscanf-$VERSION_SHORT-linux/

      - name: Check created directory structure
        run: |
          echo "Directory structure:"
          find sscanf-$VERSION_SHORT-linux -type f

      - name: Create Linux tar.gz archive
        run: |
          tar -czf sscanf-$VERSION_SHORT-linux.tar.gz -C sscanf-$VERSION_SHORT-linux .
          
      - name: Check created archive
        run: |
          echo "Created files:"
          ls -la *.tar.gz
          
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: $ARTIFACT_NAME
          path: sscanf-$VERSION_SHORT-linux.tar.gz
